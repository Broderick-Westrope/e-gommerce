basePath: /v1/api
definitions:
  models.CreateProductRequest:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
      stock_quantity:
        type: integer
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.Product:
    properties:
      description:
        $ref: '#/definitions/sql.NullString'
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      stock_quantity:
        type: integer
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
    type: object
  sql.NullString:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
  web.errorResponse:
    properties:
      error:
        type: string
      error_id:
        type: string
    type: object
  web.idResponse:
    properties:
      id:
        type: integer
    type: object
externalDocs:
  description: GitHub repository
  url: https://github.com/Broderick-Westrope/e-gommerce
host: localhost:4000
info:
  contact:
    email: broderickwestrope@gmail.com
    name: Broderick Westrope
  description: A toy e-commerce backend made with Go.
  license:
    name: GNU General Public License v3.0
    url: https://www.gnu.org/licenses/gpl-3.0
  title: E-Gommerce API
  version: "0.1"
paths:
  /products:
    get:
      description: Retrieves all products.
      operationId: get-products
      produces:
      - application/json
      responses:
        "200":
          description: Products
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Creates a product.
      operationId: create-product
      parameters:
      - description: Product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product ID
          schema:
            $ref: '#/definitions/web.idResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Create a product
      tags:
      - products
  /products/{id}:
    delete:
      description: Deletes a product.
      operationId: delete-product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid parameter 'id'
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Delete a product
      tags:
      - products
    get:
      description: Retrieves a product by ID.
      operationId: get-product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Invalid parameter 'id'
          schema:
            $ref: '#/definitions/web.errorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Get a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Updates a product.
      operationId: update-product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.CreateProductRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid parameter 'id'
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Update a product
      tags:
      - products
  /users:
    get:
      description: Retrieves all users.
      operationId: get-users
      produces:
      - application/json
      responses:
        "200":
          description: Users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a user.
      operationId: create-user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User ID
          schema:
            $ref: '#/definitions/web.idResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Create a user
      tags:
      - users
  /users/{id}:
    delete:
      description: Deletes a user.
      operationId: delete-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid parameter 'id'
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Delete a user
      tags:
      - users
    get:
      description: Retrieves a user by ID.
      operationId: get-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid parameter 'id'
          schema:
            $ref: '#/definitions/web.errorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Get a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates a user.
      operationId: update-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid parameter 'id'
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Update a user
      tags:
      - users
swagger: "2.0"
